import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { prompt } = body

    if (!prompt) {
      return NextResponse.json(
        { error: 'Prompt is required' },
        { status: 400 }
      )
    }

    // Check if we have Google Cloud credentials
    if (!process.env.GOOGLE_API_KEY) {
      console.log('üîÑ Google API Key not configured, falling back to DALL-E')
      return await fallbackToDallE(prompt)
    }

    try {
      // Use Google Imagen via Vertex AI
      const imageUrl = await generateImageWithImagen(prompt)
      
      return NextResponse.json({
        imageUrl,
        provider: 'google-imagen',
        metadata: {
          model: 'imagen-3',
          enhancedPrompt: prompt
        }
      })
    } catch (imagenError) {
      console.error('‚ùå Google Imagen failed:', imagenError)
      console.log('üîÑ Falling back to DALL-E')
      return await fallbackToDallE(prompt)
    }

  } catch (error) {
    console.error('‚ùå Image generation error:', error)
    return NextResponse.json(
      { error: 'Failed to generate image' },
      { status: 500 }
    )
  }
}

async function generateImageWithImagen(prompt: string): Promise<string> {
  // Enhanced prompt for cosmic/mystical imagery
  const enhancedPrompt = `Cosmic, ethereal, mystical, warm golden light, magical atmosphere, fantasy elements, celestial vibes, otherworldly beauty, dreamlike quality, glowing effects, cosmic dust, stardust particles, aurora-like colors, mystical energy, enchanting, transcendent, divine light, heavenly glow, fantastical, surreal, mesmerizing, captivating, professional photography, high resolution, cinematic lighting, warm color palette, golden hour, magical realism, spiritual energy, cosmic wonder, ethereal glow, mystical aura, enchanting atmosphere, otherworldly, celestial beauty, divine inspiration, magical realism, warm and inviting, cosmically beautiful, fantastically stunning: ${prompt}`

  // Use Google AI Studio API for Imagen (simpler approach)
  const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-001:generateImage', {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.GOOGLE_API_KEY}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      prompt: enhancedPrompt,
      config: {
        aspectRatio: 'ASPECT_RATIO_1_1',
        safetyFilterLevel: 'BLOCK_ONLY_HIGH',
        personGeneration: 'ALLOW_ADULT'
      }
    })
  })

  if (!response.ok) {
    throw new Error(`Imagen API failed: ${response.status} ${response.statusText}`)
  }

  const data = await response.json()
  const imageData = data.generatedImages?.[0]?.imageData
  
  if (!imageData) {
    throw new Error('No image generated by Imagen')
  }

  // Convert base64 to data URL
  return `data:image/jpeg;base64,${imageData}`
}

async function fallbackToDallE(prompt: string) {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'}/api/generate-image`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ prompt })
    })

    if (!response.ok) {
      throw new Error('DALL-E fallback failed')
    }

    const data = await response.json()
    return NextResponse.json({
      imageUrl: data.imageUrl,
      provider: 'dall-e-fallback',
      metadata: {
        model: 'dall-e-3',
        enhancedPrompt: prompt,
        fallback: true
      }
    })
  } catch (error) {
    console.error('‚ùå DALL-E fallback failed:', error)
    return NextResponse.json(
      { error: 'All image generation methods failed' },
      { status: 500 }
    )
  }
}
